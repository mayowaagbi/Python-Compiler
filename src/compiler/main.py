from lexer import lexer  # Lexer from your lexer file
from parser import parser  # Parser from your parser file
from optimizations import dead_code_elimination  # Import dead code elimination
from llvm_ir_generator import LLVMGenerator  # Import LLVM IR generation function
from llvmlite import binding  # For LLVM IR verification
from llvm_executor import execute_llvm_ir  # Import the LLVM execution function


def main():
    # Example input to be lexed, parsed, and processed
    test_input = """
    x = 5;
    if (x > 3) {
        y = 10;
    } else {
        y = 0;
    }
    """

    # Step 1: Initialize the lexer with the input
    lexer.input(test_input)

    # Debug: Print tokens generated by the lexer
    print("Tokens generated by the lexer:")
    for token in lexer:
        print(token)

    # Step 2: Parse the input
    result = parser.parse(test_input, lexer=lexer)

    # Output the result of parsing
    print("\nResult of parsing:")
    print(result.pretty_print())

    # Step 3: Apply constant folding optimization on the AST
    optimized_ast = result.constant_folding()

    # Step 4: Generate and print LLVM IR
    generate_llvm_ir = LLVMGenerator()
    llvm_ir = generate_llvm_ir.generate_code(optimized_ast)
    print("\nGenerated LLVM IR:")
    print(llvm_ir)

    # Step 5: Verify the generated LLVM IR
    binding.initialize()
    binding.initialize_native_target()
    binding.initialize_native_asmprinter()

    llvm_module = binding.parse_assembly(llvm_ir)
    try:
        llvm_module.verify()
        print("\nLLVM IR Verified Successfully.")
    except binding.LLVMException as e:
        print("\nLLVM IR Verification Failed:")
        print(e)
        return  # Exit if verification fails

    # Step 6: Execute the generated LLVM IR
    execute_llvm_ir(llvm_ir)


if __name__ == "__main__":
    main()
