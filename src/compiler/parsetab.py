
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMENT DIVIDE EQUALS FALSE GREATER ID KEYWORD LBRACE LPAREN MINUS NEWLINE NUMBER OPERATOR PLUS RBRACE RPAREN SEMICOLON STRING TIMES TRUEprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : expression SEMICOLON\n                 | assignment_statementassignment_statement : ID EQUALS expression SEMICOLONexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression OPERATOR expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : STRINGexpression : TRUE\n                  | FALSE'
    
_lr_action_items = {'LPAREN':([0,2,3,5,6,12,13,14,15,16,17,18,20,28,],[6,6,-3,-5,6,-2,-4,6,6,6,6,6,6,-6,]),'NUMBER':([0,2,3,5,6,12,13,14,15,16,17,18,20,28,],[7,7,-3,-5,7,-2,-4,7,7,7,7,7,7,-6,]),'STRING':([0,2,3,5,6,12,13,14,15,16,17,18,20,28,],[8,8,-3,-5,8,-2,-4,8,8,8,8,8,8,-6,]),'TRUE':([0,2,3,5,6,12,13,14,15,16,17,18,20,28,],[9,9,-3,-5,9,-2,-4,9,9,9,9,9,9,-6,]),'FALSE':([0,2,3,5,6,12,13,14,15,16,17,18,20,28,],[10,10,-3,-5,10,-2,-4,10,10,10,10,10,10,-6,]),'ID':([0,2,3,5,12,13,28,],[11,11,-3,-5,-2,-4,-6,]),'$end':([1,2,3,5,12,13,28,],[0,-1,-3,-5,-2,-4,-6,]),'SEMICOLON':([4,7,8,9,10,21,22,23,24,25,26,27,],[13,-13,-14,-15,-16,-7,-8,-9,-10,-11,-12,28,]),'PLUS':([4,7,8,9,10,19,21,22,23,24,25,26,27,],[14,-13,-14,-15,-16,14,14,14,14,14,14,-12,14,]),'MINUS':([4,7,8,9,10,19,21,22,23,24,25,26,27,],[15,-13,-14,-15,-16,15,15,15,15,15,15,-12,15,]),'TIMES':([4,7,8,9,10,19,21,22,23,24,25,26,27,],[16,-13,-14,-15,-16,16,16,16,16,16,16,-12,16,]),'DIVIDE':([4,7,8,9,10,19,21,22,23,24,25,26,27,],[17,-13,-14,-15,-16,17,17,17,17,17,17,-12,17,]),'OPERATOR':([4,7,8,9,10,19,21,22,23,24,25,26,27,],[18,-13,-14,-15,-16,18,18,18,18,18,18,-12,18,]),'RPAREN':([7,8,9,10,19,21,22,23,24,25,26,],[-13,-14,-15,-16,26,-7,-8,-9,-10,-11,-12,]),'EQUALS':([11,],[20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,2,],[3,12,]),'expression':([0,2,6,14,15,16,17,18,20,],[4,4,19,21,22,23,24,25,27,]),'assignment_statement':([0,2,],[5,5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',10),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expr','parser.py',19),
  ('statement -> assignment_statement','statement',1,'p_statement_expr','parser.py',20),
  ('assignment_statement -> ID EQUALS expression SEMICOLON','assignment_statement',4,'p_assignment_statement','parser.py',24),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',28),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',29),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',30),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',31),
  ('expression -> expression OPERATOR expression','expression',3,'p_expression_binop','parser.py',32),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',36),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',40),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',44),
  ('expression -> TRUE','expression',1,'p_expression_boolean','parser.py',48),
  ('expression -> FALSE','expression',1,'p_expression_boolean','parser.py',49),
]
